@import "../pui-variables";
@import '../mixins';
@import '../../../../node_modules/bootstrap-sass/assets/stylesheets/bootstrap/mixins';

/*doc
---
title: Autocomplete
name: autocomplete_react
categories:
  - React
---

<code class="pam">
<i class="fa fa-download" alt="Install the Component">
npm install pui-react-autocomplete --save
</i>
</code>

```react_example
<div className="styleguide-component-wrapper ptl">
  <UI.Autocomplete onInitializeItems={function(cb){cb(['foo', 'food', 'bar'])}}
      onPick={function(item){alert('You selected ' + item.value)}}/>
</div>
```

*/

.autocomplete {
  position: relative;

  .form-inline & {
    display: inline-block;
  }

  .autocomplete-input {
    box-shadow: 0 2px 0 $neutral-7;
  }

  .autocomplete-list {
    position: absolute;
    padding: 0;
    margin: 0;
    left: 0;
    right: 0;
    max-height: 200px;
    overflow-x: hidden;
    overflow-y: auto;
    border: solid 1px $neutral-9;
    border-top: 0;
  }

  .autocomplete-item {
    padding: $whitespace-s 15px; //specific horizontal padding to align with text in the input
    display: block;
    white-space: nowrap;
    color: inherit;
    &:hover {
      text-decoration: none;
    }
    &:active {
      background: $neutral-9;
    }
    &.selected {
      font-weight: $font-weight-em-high;
    }
    &.highlighted {
      background: $neutral-9;
      text-decoration: none;
    }
  }

  &.disabled {
    background-color: $neutral-10;
    border-radius: 4px;

    input {
      box-shadow: none;
      color: $neutral-5;
      background-color: transparent;
      cursor: default;
    }
  }
}

/*doc
---
title: onInitializeItems
name: autocomplete_oninitializeitems
parent: autocomplete_react
---

The callback passed to this function should return the values to initially populate the list of items.

It's designed to be able to be used asynchronously:

```js
function onInitializeItems(callback) {
  $.get('example.com/autocomplete_items').then(function(items) {
    callback(items);
  });
};
```

But it can also just be used synchronously:

```js
function onInitializeItems(callback) {
  callback(['foo', 'food', 'bar']);
};
```

*/

/*doc
---
title: onPick
name: autocomplete_onpick
parent: autocomplete_react
---

By default, when a user selects a list item, nothing happens except hiding the list.

```js
function onPick(value) {
  $.post('example.com/add_to_cart?thing=' + value);
};
```

*/

/*doc
---
title: onSearch
name: autocomplete_onsearch
parent: autocomplete_react
---

To override the default search algorithm, pass your custom function to the Autocomplete as the prop onSearch.

onSearch is given the current value of the input and a callback.

The callback should return the items that should be shown in the list given that input value.

The list should be an array of objects with the `value` key e.g.
`[{value: 'foo'}, {value: 'food'}, {value: 'foe'}]`

It's designed to be able to be used asynchronously:

```js
function onSearch(value, callback) {
  $.get('example.com/autocomplete_results?value=' + value).then(function(results) {
     callback(results);
  });
};
```

But it can also just be used synchronously:

```js
function onSearch(value, callback) {
  callback(myCustomList.filter(function(entry) { return entry.includes('foo-' + value + '-bar') }));
};
```

*/