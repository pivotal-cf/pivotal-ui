/*doc
---
title: Lists
name: list
categories:
  - Elements
  - All
---

This section contains different list styles.
*/

/*pending
---
title: JS Lists
name: lists_js
categories:
  - Objects
  - All
---

This section contains different list behaviors. See [lists][list] to see different list styles.
*/


/*doc
---
title: Inline
name: list_inline
parent: list
---

An inline list is one of the three methods for laying out content (including grids and the media block).

```html_example
<ul class="list-inline">
  <li>
    feep
  </li>
  <li>
    fop
  </li>
  <li>
    meep
  </li>
</ul>
```

You can use inline lists to lay out elements. Here's an example of a header next to a button:

```html_example
<ul class="list-inline lhxl">
  <li class="txt-m">
    <h5 class="em-alt em-max">Bound Services</h5>
  </li>
  <li class="txt-m">
    <a class="btn btn-default" target="_blank">Add from Marketplace</a>
  </li>
</ul>
```

*/

.list-inline {
  font-size: 0;
  > li {
    font-size: $font-size-base;
  }
}

/*doc
---
title: Ordered
name: list_ordered
parent: list
---


```html_example
<ol>
  <li>
    feep
  </li>
  <li>
    fop
  </li>
  <li>
    meep
  </li>
</ol>
```

*/

/*doc
---
title: Unordered
name: list_unordered
parent: list
---

```html_example
<ul class="list-unordered">
  <li>
    feep
  </li>
  <li>
    fop
  </li>
  <li>
    meep
  </li>
</ul>
```

*/

.list-unordered {
  padding-left: 0;
  > li {
    margin-left: 17px;
  }
}

/*doc
---
title: Unstyled
name: list_unstyled
parent: list
---

Places all list items on a single line with `display: inline-block;` and some light padding. The `.list-unstyled` class can be applied to either a `<ul>` or and `<ol>`.

```html_example
<ul class="list-unstyled">
  <li>
    feep
  </li>
  <li>
    fop
  </li>
  <li>
    meep
  </li>
</ul>
```

*/

/*doc
---
title: Inline Divider
name: list_inline_divider
parent: list
---

Places all list items on a single line with `display: inline-block;` and some light padding. The `.list-inline-divider`
also adds a simple gray border (add `.list-inline-divider-light` to make the border white).

```html_example
<ul class="list-inline-divider">
  <li><a class="type-em-1" href="http://google.com">Edit</a></li>
  <li><a class="type-em-1" href="http://google.com">Invite</a></li>
</ul>
```

Here's the same example on a dark background:

```html_example
<div class="contrast-bar">
  <ul class="list-inline-divider list-inline-divider-light">
    <li><a class="type-em-1" href="http://google.com">Edit</a></li>
    <li><a class="type-em-1" href="http://google.com">Invite</a></li>
  </ul>
</div>
```

*/

@mixin list-inline-divider($color: $neutral-5) {
  > li {

    line-height: 1em;

    &:not(:first-child) {
      border-left: 1px solid $color;
    }
  }
}

.list-inline-divider {
  @extend .list-inline;
  @include list-inline-divider();
}

.list-inline-divider-light {
  @include list-inline-divider($list-inline-divider-light-color);
}

/*doc
---
title: Breadcrumb
name: list_breadcrumb
parent: list
---

The `.list-breadcrumb` can be used to provide additional page navigation.

Breadcrumbs use their own monospace font-family.

```html_example
<ul class="list-breadcrumb">
  <li>
    <a href="http://google.com">Parent</a>
  </li>
  <li>
    <a href="http://google.com">Child</a>
  </li>
  <li class="current">
    <span>Current Page</span>
  </li>
</ul>
```
*/

.list-breadcrumb {
  @extend .list-inline;
  margin-bottom: 0;

  font-family: "Consolas", "Menlo", "Monaco", "Lucida Console", "Liberation Mono", "DejaVu Sans Mono", "Bitstream Vera Sans Mono", "Courier New", monospace, serif;

  > li {
    font-size: 0; // TODO: remove all font-size hacks from this file when we start minifying our HTML
    a, &.current span {
      font-size: 14px;
      display: inline-block;
      max-width: 200px;
      @include ellipsis;
      vertical-align: middle;
    }

    &.current span {
      color: $navbar-default-link-color;
    }

    padding-left: 0;
    padding-right: 0;
    &:before {
      font-size: $font-size-base;
      color: $navbar-default-link-color;
      content: ">";
      vertical-align: middle;
      padding-right: 5px;
      padding-left: 5px;
    }
    &:first-child:before {
      content: "";
    }
  }
}

/*doc
---
title: Group
name: list_group
parent: list
---

Use this list when you need simple gray borders between items

```html_example
<ul class="list-group">
  <li class="list-group-item">
    item 1
  </li>
  <li class="list-group-item">
    item 2
  </li>
  <li class="list-group-item">
    item 3
  </li>
</ul>
```

Group lists are great for displaying lists of events
Here's an example from Console:

```html_example
<ul class="list-group">
  <li class="list-group-item pln">
    <div class="media">
      <div class="media-left media-middle phxxl">
        <i class="fa-exclamation-circle type-error-3 fa h2 man"></i>
      </div>
      <div class="media-body pbn">
        <div class="type-neutral-2 mbs">
          app crashed
        </div>
        <div class="type-neutral-4 small">
          <span>user@example.com</span>
          <span>11/14/2014 at 4:00 PM UTC</span>
        </div>
      </div>
    </div>
  </li>

  <li class="list-group-item pln">
    <div class="media">
      <div class="media-left media-middle phxxl">
        <i class="fa-stop type-neutral-5 fa h2 man"></i>
      </div>
      <div class="media-body pbn">
        <div class="type-neutral-2 mbs">
          stopped app
        </div>
        <div class="type-neutral-4 small">
          <span>user@example.com</span>
          <span>11/14/2014 at 3:00 PM UTC</span>
        </div>
      </div>
    </div>
  </li>

  <li class="list-group-item pln">
    <div class="media">
      <div class="media-left media-middle phxxl">
        <i class="fa-play type-brand-3 fa h2 man"></i>
      </div>
      <div class="media-body pbn">
        <div class="type-neutral-2 mbs">
          started app
        </div>
        <div class="type-neutral-4 small">
          <span>user@example.com</span>
          <span>11/14/2014 at 2:00 PM UTC</span>
        </div>
      </div>
    </div>
  </li>
</ul>
```
*/

/*pending
---
title: Addable
name: list_addable
parent: lists_js
---

New elements fade in

```html_example
<ul class="list-group" id="list-group-adding-demo">
  <li class="list-group-item">
    item 1
  </li>
  <li class="list-group-item">
    item 2
  </li>
  <li class="list-group-item">
    item 3
  </li>
</ul>

<a data-add-item-to="#list-group-adding-demo">Add an item</a>
```


*/

.list-group {
  &, > li {
    border-width: 1px 0;
  }
}

.list-group-item {
  padding-right: 5px; //bootstrap override

  &.new {
    -webkit-animation: new-list-group-item-grow .3s cubic-bezier(0.895, 0.03, 0.685, 0.22) forwards, new-list-group-item-fade .5s ease-in .15s forwards;
    -moz-animation: new-list-group-item-grow .3s cubic-bezier(0.895, 0.03, 0.685, 0.22) forwards, new-list-group-item-fade .5s ease-in .15s forwards;
  }
}

@-webkit-keyframes new-list-group-item-fade {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

@-webkit-keyframes new-list-group-item-grow {
  0% {
    max-height: 0;
    padding-top: 0px;
    padding-bottom: 0px;
  }
  100% {
    max-height: 100px;
    padding-top:10px;
    padding-bottom:10px;
  }
}

@keyframes new-list-group-item-fade {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes new-list-group-item-grow {
  from {
    max-height: 0;
    padding: 0px 15px;
  }
  to {
    max-height: 100px;
    padding: 10px 15px;
  }
}

.list-notitle{
  li:first-child{
    border-top:0;
  }
  li:last-child{
    border-bottom:0;
  }
}

/*doc
---
title: Event List
name: list_event
parent: console
---

This is a special list-group, with styles per-event for colors and icons.

<div class="alert alert-danger mbxl">
  <h5 class="em-high mtn">
    Deprecation warning
  </h5>
  <p>
    This component is deprecated.
    To create this component, use a <a class="alert-link" href="/elements.html#list_group">list group</a>.
  </p>
</div>

```html_example
<ul class="list-group event-list">
  <li class="list-group-item started">
    <div class="media">
      <div class="media-left media-middle">
        <div class="event-icon"></div>
      </div>
      <div class="media-body">
        <div class="event-title">started app</div>
        <span class="event-user">user@example.com</span>
        <span class="event-timestamp">11/14/2014 at 03:05 PM UTC</span>
      </div>
    </div>
  </li>
  <li class="list-group-item stopped">
    <div class="media">
      <div class="media-left media-middle">
        <div class="event-icon"></div>
      </div>
      <div class="media-body">
        <div class="event-title">stopped app</div>
        <span class="event-user">user@example.com</span>
        <span class="event-timestamp">11/14/2014 at 03:05 PM UTC</span>
      </div>
    </div>
  </li>
  <li class="list-group-item updated">
    <div class="media">
      <div class="media-left media-middle">
        <div class="event-icon"></div>
      </div>
      <div class="media-body">
        <div class="event-title">updated app</div>
        <span class="event-user">user@example.com</span>
        <span class="event-timestamp">11/14/2014 at 03:05 PM UTC</span>
      </div>
    </div>
  </li>
  <li class="list-group-item scaled">
    <div class="media">
      <div class="media-left media-middle">
        <div class="event-icon"></div>
      </div>
      <div class="media-body">
        <div class="event-title">scaled app</div>
        <span class="event-user">user@example.com</span>
        <span class="event-timestamp">11/14/2014 at 03:05 PM UTC</span>
      </div>
    </div>
  </li>
  <li class="list-group-item crashed">
    <div class="media">
      <div class="media-left media-middle">
        <div class="event-icon"></div>
      </div>
      <div class="media-body">
        <div class="event-title">app crashed</div>
        <span class="event-user">user@example.com</span>
        <span class="event-timestamp">11/14/2014 at 03:05 PM UTC</span>
      </div>
    </div>
  </li>
  <li class="list-group-item created">
    <div class="media">
      <div class="media-left media-middle">
        <div class="event-icon"></div>
      </div>
      <div class="media-body">
        <div class="event-title">created app</div>
        <span class="event-user">user@example.com</span>
        <span class="event-timestamp">11/14/2014 at 03:05 PM UTC</span>
      </div>
    </div>
  </li>
  <li class="list-group-item renamed phn">
    <div class="media">
      <div class="media-left media-middle">
        <div class="event-icon"></div>
      </div>
      <div class="media-body">
        <div class="event-title">renamed app</div>
        <span class="event-user">user@example.com</span>
        <span class="event-timestamp">11/14/2014 at 03:05 PM UTC</span>
      </div>
    </div>
  </li>
</ul>
```
*/

.event-list {
  .list-group-item {
    padding-left: 0;
    padding-right: 0;
  }

  .media-left {
    padding-left: 0;
    padding-right: 0;
  }

  .event-title {
    margin-bottom: 2px;
    color: $gray-2;
  }

  .event-user, .event-timestamp {
    color: $gray-4;
    font-size: 13px;
  }

  .event-icon {
    font-family: 'FontAwesome';
    font-size: 22px;
    width: 90px;
    text-align:center;
  }

  .started {
    .event-icon:after {
      color: $teal-3;
      content: '\f04b';
    }
  }
  .stopped {
    .event-icon:after {
      color: $gray-5;
      content: '\f04d';
    }
  }
  .updated {
    .event-icon:after {
      color: $teal-3;
      content: '\f01b';
    }
  }
  .scaled {
    .event-icon:after {
      color: $teal-3;
      content: '\f0e4';

    }
  }
  .crashed {
    .event-icon:after {
      color: $red-3;
      content: '\f06a';

    }
  }
  .created {
    .event-icon:after {
      color: $teal-3;
      content: '\f135';

    }
  }
  .renamed {
    .event-icon:after {
      color: $teal-3;
      content: '\f040';

    }
  }
}

/*doc
---
title: Vertical Divider
name: list_vertical_divider
parent: list
---

Use this list when you need larger gray borders between
items. It should be used in concert with grid column
sizes when you want the items to take a particular width.

We achieve equal height columns using the padding/margin hack,
so we need an additional `.height-enforcer` element to get the
right min-height.

```html_example
<ul class="list-vertical-divider">
  <li class="col-md-8">
    <div class="height-enforcer">
      item 1
    </div>
  </li>
  <li class="col-md-8">
    <div class="height-enforcer">
      item 2
    </div>
  </li>
  <li class="col-md-8">
    <div class="height-enforcer" style="height: 200px">
      item 3, which is taller
    </div>
  </li>
</ul>
```

```html_example
<ul class="list-vertical-divider-2">
  <li class="col-md-8">
    <div class="height-enforcer">
      item 1
    </div>
  </li>
  <li class="col-md-8">
    <div class="height-enforcer">
      item 2
    </div>
  </li>
  <li class="col-md-8">
    <div class="height-enforcer" style="height: 200px">
      item 3, which is taller
    </div>
  </li>
</ul>
```

*/

.list-vertical-divider {
  @extend .list-inline;
  @include clearfix-me(micro);

  overflow: hidden;

  > li {
    &:first-child {
      border-left: none;
    }
    border-left: $list-vertical-divider-border;
    padding-bottom: 9000px;
    margin-bottom: -9000px;

    .height-enforcer {
      min-height: 130px;
    }
  }
}

.list-vertical-divider-2 {
  @extend .list-vertical-divider;
  margin-bottom: 40px;
  > li {
    border-left: $divider-lowlight-border;
    padding-left: 30px;
    padding-right: 30px;
  }
  >li:first-child {
    padding-left: 30px;
  }
}

/*doc
---
title: Steps
name: list_steps
parent: list
---

Use this list when you need to show the steps in a flow.

```html_example
<ol class="list-steps">
  <li>
    Sign up Account
  </li>
  <li class="current">
    Create Organization
  </li>
  <li>
    Do other things
  </li>
  <li>
    And more things
  </li>
</ol>
```

*/

.list-steps {
  @extend .list-inline;
  > li {
    font-size: 14px;
    text-transform:uppercase;
    color: $list-steps-color;
    margin-right: 45px;
    padding-left: 0; // overrides .list-inline styles
    margin-bottom: 5px;
    counter-increment: list-steps;
    font-weight:600;
    &:before {
      content: counter(list-steps);

      display: block;
      padding: 0px 7px;
      margin-right:4px;
      text-align: center;
      color: $list-steps-color;
      display: inline-block;
      border: 2px solid $list-steps-color;
      border-radius: 30px; // set to be higher than required so that it will work with larger fonts/paddings.
    }
    &.current {
      color: $list-steps-color-current;
      font-weight:900;
      &:before {
        color: $list-steps-color-current;
        border-color: $list-steps-color-current;
      }
    }
  }
}




/*doc
---
title: Checked
name: list_checked
parent: list
---

Replaces the default bullet image with the font awesome checkmark.

```html_example
<ul class="list-checked">
  <li>
    feep
  </li>
  <li>
    fop
  </li>
  <li>
    meep
  </li>
</ul>
```

*/

.list-checked {
  list-style: none;
  padding-left: 20px;

  > li:before {
    font-family: 'FontAwesome';
    // Font Awesome unicode for fa-check
    content: '\f00c';
    margin: 0 5px 0 -15px;
    color: $teal-2;
  }
}



@include ooListWhitespace(($whitespace-s, $whitespace-m, $whitespace-l, $whitespace-xl));


/*doc
---
title: Cards
name: list_cards
parent: list
---

As the browser width changes, list-cards fill in one after another. There are two card types, `type-card-1` and
`type-card-2`. For this example, we've set both of them to stack on mobile sized screens.

```html_example_table
<ul class="list-cards list-card-1 list-cards-xs">
  <li class="bg-neutral-7">
    <p>list-card-1</p>
  </li>
</ul>

<ul class="list-cards list-card-2 list-cards-xs">
  <li class="bg-neutral-7">
    <p>list-card-2</p>
  </li>
</ul>
```

You can specify the breakpoint in which the cards stack by using the `list-card-*` classes. If the breakpoint is not
specified, the cards fill 100% of the `list-cards` width.


List Card Breakpoints | Class Names
--------------------- | ---------------
extra-small           | `.list-card-xs`
small                 | `.list-card-sm`
medium                | `.list-card-md`
large                 | `.list-card-lg`
extra-large           | `.list-card-xl`

<div class="alert alert-info mbxl">
  <p class="em-high">The cards list should only be used in fully liquid layouts, otherwise grids are a better choice.</p>
</div>

This is an example of a card list with the `list-cards-xs` stack point applied.
Resize the browser to see how cards stack on desktop sizes and expand on mobile sizes.

```html_example
<ul class="list-cards list-card-2 list-cards-xs">
  <li class="bg-neutral-7">
    <p>lorem ipsum 1</p>
  </li>
  <li class="bg-neutral-7">
    <p>lorem ipsum 2</p>
  </li>
  <li class="bg-neutral-7">
    <p>lorem ipsum 3</p>
  </li>
  <li class="bg-neutral-7">
    <p>lorem ipsum 4</p>
  </li>
  <li class="bg-neutral-7">
    <p>lorem ipsum 5</p>
  </li>
  <li class="bg-neutral-7">
    <p>lorem ipsum 6</p>
  </li>
  <li class="bg-neutral-7">
    <p>lorem ipsum 7</p>
  </li>
  <li class="bg-neutral-7">
    <p>lorem ipsum 8</p>
  </li>
</ul>
```
If you would like custom card dimensions, in your sass include the makeCard mixin, like so: `@include makeCard(height, width, name);`
You can then access the class via `.list-card-#{name}`.

<h3 class="styleguide">Clickable List Cards</h3>

If you want your list cards to function as links (i.e. be clickable),
wrap all the inner content in `a` with class `list-card-link`.

```html_example
<ul class="list-cards list-card-1 list-cards-xs">
  <li class="bg-neutral-7">
    <a class="list-card-link" href="http://bit.ly/1sEyvH5">
      <p>This entire list card is clickable!</p>
    </a>
  </li>
  <li class="bg-neutral-7">
    <a class="list-card-link" href="http://bit.ly/1sFaArX">
      <p>This entire list card is clickable as well!</p>
    </a>
  </li>
</ul>
```
*/

.list-cards {
  @include clearfix-micro;
  @extend .list-unstyled;

  > li {
    margin-bottom: $grid-gutter-width;
  }
}

@mixin setCardWidthResponsive($width) {
  $breakpoints: (xs: $screen-xs-min, sm: $screen-sm-min, md: $screen-md-min, lg: $screen-lg-min, xl: $screen-xl-min);
  @each $key, $breakpoint in $breakpoints {
    @media(min-width: $breakpoint) {
      &.list-cards-#{$key} {
        > li {
          width: $width;
          float: left;
          margin-right: $grid-gutter-width;
        }
      }
    }
  }
}

@mixin makeCard($height, $width, $name){
  .list-card-#{$name} {
    @include setCardWidthResponsive($width);
    > li {
      height: $height;

      a.list-cards-link, // deprecated in favor of the singular
      a.list-card-link {
        display: block;
        height: $height;
      }

      .list-card-wrapper {
        height: $height;
      }

    }
  }
}

@include makeCard(126px, 435px, 1);
@include makeCard(196px, 284px, 2);


/*doc
---
title: Layout Lists
name: layout_lists
categories:
  - Layout
  - All
---

Sometimes you might want to use lists to lay out elements on the page.

[Inline lists][list_inline] and [vertical divider lists][list_vertical_divider]
are particularly useful when you don't know the width of the element you want to layout,
or you want to vertically align it.

Use [Card lists][list_cards] if you'd like to make a grid of vertically and horizontally aligned cards.

*/


/*doc
---
title: Lists
name: list_react
categories:
  - React Beta
---
*/

/*doc
---
title: Unordered
name: list_unordered_react
parent: list_react
---

```react_example_table
<UI.UnorderedList>
  <UI.ListItem>Item 1</UI.ListItem>
  <UI.ListItem>Item 2</UI.ListItem>
  <UI.ListItem>Item 3</UI.ListItem>
</UI.UnorderedList>
```

```react_example_table
<UI.UnorderedList unstyled>
  <UI.ListItem>Item 1</UI.ListItem>
  <UI.ListItem>Item 2</UI.ListItem>
  <UI.ListItem>Item 3</UI.ListItem>
</UI.UnorderedList>
```

```react_example_table
<UI.UnorderedList checked>
  <UI.ListItem>Item 1</UI.ListItem>
  <UI.ListItem>Item 2</UI.ListItem>
  <UI.ListItem>Item 3</UI.ListItem>
</UI.UnorderedList>
```
*/

/*doc
---
title: Ordered
name: list_ordered_react
parent: list_react
---

```react_example_table
<UI.OrderedList>
  <UI.ListItem>Item 1</UI.ListItem>
  <UI.ListItem>Item 2</UI.ListItem>
  <UI.ListItem>Item 3</UI.ListItem>
</UI.OrderedList>
```

```react_example_table
<UI.OrderedList unstyled>
  <UI.ListItem>Item 1</UI.ListItem>
  <UI.ListItem>Item 2</UI.ListItem>
  <UI.ListItem>Item 3</UI.ListItem>
</UI.OrderedList>
```
*/

/*doc
---
title: Inline
name: list_inline_react
parent: list_react
---

```react_example_table
<UI.InlineList>
  <UI.ListItem>Item 1</UI.ListItem>
  <UI.ListItem>Item 2</UI.ListItem>
  <UI.ListItem>Item 3</UI.ListItem>
</UI.InlineList>

<UI.InlineList divider>
  <UI.ListItem>Item 1</UI.ListItem>
  <UI.ListItem>Item 2</UI.ListItem>
  <UI.ListItem>Item 3</UI.ListItem>
</UI.InlineList>
```
*/

/*doc
---
title: Group
name: list_group_react
parent: list_react
---

```react_example
<UI.GroupList>
  <UI.ListItem>Item 1</UI.ListItem>
  <UI.ListItem>Item 2</UI.ListItem>
  <UI.ListItem>Item 3</UI.ListItem>
</UI.GroupList>
```
*/

/*doc
---
title: Breadcrumb
name: list_breadcrumb_react
parent: list_react
---

```react_example
<UI.BreadcrumbList>
  <UI.ListItem><a href="#">Item 1</a></UI.ListItem>
  <UI.ListItem><a href="#">Item 2</a></UI.ListItem>
  <UI.ListItem className="current"><span>Item 3</span></UI.ListItem>
</UI.BreadcrumbList>
```
*/

/*doc
---
title: Steps
name: list_steps_react
parent: list_react
---

```react_example
<UI.StepList>
  <UI.ListItem>Item 1</UI.ListItem>
  <UI.ListItem>Item 2</UI.ListItem>
  <UI.ListItem className="current">Item 3</UI.ListItem>
</UI.StepList>
```
*/

/*doc
---
title: Configuring Spacing
name: list_spacing_react
parent: list_react
---

List Spacing can be changed setting the size of the spacing property.

|Options|Values       | Pixels
|-------|-------------|-------
|`n`    |none         |0px
|`s`    |small        |5px
|`m`    |medium       |7px
|`l`    |large        |10px
|`xl`   |extra large  |21px

```react_example
<UI.StepList spacing="n">
  <UI.ListItem>Item 1</UI.ListItem>
  <UI.ListItem>Item 2</UI.ListItem>
  <UI.ListItem className="current">Item 3</UI.ListItem>
</UI.StepList>
```

```react_example
<UI.UnorderedList spacing="xl">
  <UI.ListItem>Item 1</UI.ListItem>
  <UI.ListItem>Item 2</UI.ListItem>
  <UI.ListItem className="current">Item 3</UI.ListItem>
</UI.UnorderedList>
```

*/

/*doc
---
title: Draggable
name: list_draggable_react
parent: list_react
---

Creates a draggable list.

The property `onDrop` is a callback when a drop event has completed. Use this
if you need to make an API call to update the order of some elements.

```jsx_example
var draggableListDropCallback = function(data) {
  alert('New item indices order: ' + data);
};
```

```react_example
<UI.DraggableList onDrop={draggableListDropCallback}>
  <UI.DraggableListItem>
    Get me out of here!
  </UI.DraggableListItem>

  <UI.DraggableListItem>
    LOL
  </UI.DraggableListItem>

  <UI.DraggableListItem>
    Can't stop
  </UI.DraggableListItem>
</UI.DraggableList>
```
*/

.list-draggable {
  @include user-select(none);

  .draggable-grip {
    display: inline-block;
    color: $list-draggable-grip;
  }

  > li {
    width: 100%;

    .draggable-item-content {
      padding: $list-draggable-item-content-padding;
      background: $list-draggable-item-content-bg;
    }

    &.hover {
      cursor: move;

      .draggable-grip {
        color: $list-draggable-grip-active;
      }
    }

    &.grabbed {
      background-color: $list-draggable-bg;
      * {
        visibility: hidden;
      }
    }

    &.grabbed .draggable-grip {
      visibility: hidden;
    }
  }
}


/*doc
---
title: Addable
name: list_addable_react
parent: list_react
---

Here's an example of how you might write an addable list component. Transitions are added to each list item through `componentWillEnter`.
If you wish to save the new item in your database, you should do so in the `change` function, before setting state.

```jsx_example
var ReactTransitionGroup = React.addons.TransitionGroup;

var AddableListItem = React.createClass({
  componentWillEnter: function(done) {
    this.$el = $(this.getDOMNode());
    this.$el.addClass("new-enter");
    done();
  },

  render: function(){
    return (
      <UI.ListItem {...this.props}>{this.props.children}</UI.ListItem>
    );
  }
});

var AddableList = React.createClass({
  getInitialState: function() {
    return {
      items: ['one','two','three']
    };
  },

  change: function() {
    var newItems = this.state.items.concat([prompt('Enter some text')]);
    this.setState({items: newItems});
  },

  render: function() {
    var items = _.map(this.state.items, function(item, key) {
      return (
        <AddableListItem key={key+item}>
          {item}
        </AddableListItem>
      );
    });
    return (
      <div>
        <ReactTransitionGroup component={UI.StepList} transitionName='new'>
          {items}
        </ReactTransitionGroup>
        <UI.HighlightButton onClick={this.change}>Click to Add Item</UI.HighlightButton>
      </div>
    );
  }
});
```

```react_example
<AddableList />
```
*/
